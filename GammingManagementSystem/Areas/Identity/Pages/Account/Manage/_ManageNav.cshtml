@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@{
    var hasExternalLogins = (await SignInManager.GetExternalAuthenticationSchemesAsync()).Any();
    var role = "";
    if (User.FindFirst("UserRole") != null)
    {
        role = User.FindFirst("UserRole").Value;
    }
}
<ul class="nav nav-pills flex-column">
    <li class="nav-item"><a class="nav-link @ManageNavPages.IndexNavClass(ViewContext)" id="profile" asp-page="./Index">Profile</a></li>
    <li class="nav-item"><a class="nav-link @ManageNavPages.EmailNavClass(ViewContext)" id="email" asp-page="./Email">Email</a></li>
    <li class="nav-item"><a class="nav-link @ManageNavPages.ChangePasswordNavClass(ViewContext)" id="change-password" asp-page="./ChangePassword">Password</a></li>
    @if (hasExternalLogins)
    {
        <li id="external-logins" class="nav-item"><a id="external-login" class="nav-link @ManageNavPages.ExternalLoginsNavClass(ViewContext)" asp-page="./ExternalLogins">External logins</a></li>
    }
    <li class="nav-item"><a class="nav-link @ManageNavPages.TwoFactorAuthenticationNavClass(ViewContext)" id="two-factor" asp-page="./TwoFactorAuthentication">Two-factor authentication</a></li>
    <li class="nav-item"><a class="nav-link @ManageNavPages.PersonalDataNavClass(ViewContext)" id="personal-data" asp-page="./PersonalData">Personal data</a></li>
</ul>
<hr />
@if (role == "Admin" || role == "Agent")
{
    <ul class="nav nav-pills flex-column">
        <li class="nav-item">
            <a class="#">Referral</a>
            <a class="nav-link @ManageNavPages.ReferralNavCss(ViewContext)" id="referral" asp-page="./ReferralDetails">
                Details
            </a>
            <a class="nav-link @ManageNavPages.ReferralNavCss(ViewContext)" id="referralList" asp-page="./ReferralList">
                List
            </a>
        </li>
    </ul>
}
